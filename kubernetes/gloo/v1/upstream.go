// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Upstream struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	Spec       UpstreamSpecPtrOutput      `pulumi:"spec"`
	Status     pulumi.MapOutput           `pulumi:"status"`
}

// NewUpstream registers a new resource with the given unique name, arguments, and options.
func NewUpstream(ctx *pulumi.Context,
	name string, args *UpstreamArgs, opts ...pulumi.ResourceOption) (*Upstream, error) {
	if args == nil {
		args = &UpstreamArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gloo.solo.io/v1")
	args.Kind = pulumi.StringPtr("Upstream")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Upstream
	err := ctx.RegisterResource("kubernetes:gloo.solo.io/v1:Upstream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUpstream gets an existing Upstream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUpstream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UpstreamState, opts ...pulumi.ResourceOption) (*Upstream, error) {
	var resource Upstream
	err := ctx.ReadResource("kubernetes:gloo.solo.io/v1:Upstream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Upstream resources.
type upstreamState struct {
}

type UpstreamState struct {
}

func (UpstreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamState)(nil)).Elem()
}

type upstreamArgs struct {
	ApiVersion *string                `pulumi:"apiVersion"`
	Kind       *string                `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta     `pulumi:"metadata"`
	Spec       *UpstreamSpec          `pulumi:"spec"`
	Status     map[string]interface{} `pulumi:"status"`
}

// The set of arguments for constructing a Upstream resource.
type UpstreamArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       UpstreamSpecPtrInput
	Status     pulumi.MapInput
}

func (UpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*upstreamArgs)(nil)).Elem()
}

type UpstreamInput interface {
	pulumi.Input

	ToUpstreamOutput() UpstreamOutput
	ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput
}

func (*Upstream) ElementType() reflect.Type {
	return reflect.TypeOf((**Upstream)(nil)).Elem()
}

func (i *Upstream) ToUpstreamOutput() UpstreamOutput {
	return i.ToUpstreamOutputWithContext(context.Background())
}

func (i *Upstream) ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UpstreamOutput)
}

type UpstreamOutput struct{ *pulumi.OutputState }

func (UpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Upstream)(nil)).Elem()
}

func (o UpstreamOutput) ToUpstreamOutput() UpstreamOutput {
	return o
}

func (o UpstreamOutput) ToUpstreamOutputWithContext(ctx context.Context) UpstreamOutput {
	return o
}

func (o UpstreamOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o UpstreamOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Upstream) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o UpstreamOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *Upstream) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o UpstreamOutput) Spec() UpstreamSpecPtrOutput {
	return o.ApplyT(func(v *Upstream) UpstreamSpecPtrOutput { return v.Spec }).(UpstreamSpecPtrOutput)
}

func (o UpstreamOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *Upstream) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UpstreamInput)(nil)).Elem(), &Upstream{})
	pulumi.RegisterOutputType(UpstreamOutput{})
}
