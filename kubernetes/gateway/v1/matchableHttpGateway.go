// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MatchableHttpGateway struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput            `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput            `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput        `pulumi:"metadata"`
	Spec       MatchableHttpGatewaySpecPtrOutput `pulumi:"spec"`
	Status     pulumi.MapOutput                  `pulumi:"status"`
}

// NewMatchableHttpGateway registers a new resource with the given unique name, arguments, and options.
func NewMatchableHttpGateway(ctx *pulumi.Context,
	name string, args *MatchableHttpGatewayArgs, opts ...pulumi.ResourceOption) (*MatchableHttpGateway, error) {
	if args == nil {
		args = &MatchableHttpGatewayArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("gateway.solo.io/v1")
	args.Kind = pulumi.StringPtr("MatchableHttpGateway")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource MatchableHttpGateway
	err := ctx.RegisterResource("kubernetes:gateway.solo.io/v1:MatchableHttpGateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMatchableHttpGateway gets an existing MatchableHttpGateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMatchableHttpGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MatchableHttpGatewayState, opts ...pulumi.ResourceOption) (*MatchableHttpGateway, error) {
	var resource MatchableHttpGateway
	err := ctx.ReadResource("kubernetes:gateway.solo.io/v1:MatchableHttpGateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MatchableHttpGateway resources.
type matchableHttpGatewayState struct {
}

type MatchableHttpGatewayState struct {
}

func (MatchableHttpGatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*matchableHttpGatewayState)(nil)).Elem()
}

type matchableHttpGatewayArgs struct {
	ApiVersion *string                   `pulumi:"apiVersion"`
	Kind       *string                   `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta        `pulumi:"metadata"`
	Spec       *MatchableHttpGatewaySpec `pulumi:"spec"`
	Status     map[string]interface{}    `pulumi:"status"`
}

// The set of arguments for constructing a MatchableHttpGateway resource.
type MatchableHttpGatewayArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	Spec       MatchableHttpGatewaySpecPtrInput
	Status     pulumi.MapInput
}

func (MatchableHttpGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*matchableHttpGatewayArgs)(nil)).Elem()
}

type MatchableHttpGatewayInput interface {
	pulumi.Input

	ToMatchableHttpGatewayOutput() MatchableHttpGatewayOutput
	ToMatchableHttpGatewayOutputWithContext(ctx context.Context) MatchableHttpGatewayOutput
}

func (*MatchableHttpGateway) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchableHttpGateway)(nil)).Elem()
}

func (i *MatchableHttpGateway) ToMatchableHttpGatewayOutput() MatchableHttpGatewayOutput {
	return i.ToMatchableHttpGatewayOutputWithContext(context.Background())
}

func (i *MatchableHttpGateway) ToMatchableHttpGatewayOutputWithContext(ctx context.Context) MatchableHttpGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MatchableHttpGatewayOutput)
}

type MatchableHttpGatewayOutput struct{ *pulumi.OutputState }

func (MatchableHttpGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MatchableHttpGateway)(nil)).Elem()
}

func (o MatchableHttpGatewayOutput) ToMatchableHttpGatewayOutput() MatchableHttpGatewayOutput {
	return o
}

func (o MatchableHttpGatewayOutput) ToMatchableHttpGatewayOutputWithContext(ctx context.Context) MatchableHttpGatewayOutput {
	return o
}

func (o MatchableHttpGatewayOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchableHttpGateway) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

func (o MatchableHttpGatewayOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MatchableHttpGateway) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o MatchableHttpGatewayOutput) Metadata() metav1.ObjectMetaPtrOutput {
	return o.ApplyT(func(v *MatchableHttpGateway) metav1.ObjectMetaPtrOutput { return v.Metadata }).(metav1.ObjectMetaPtrOutput)
}

func (o MatchableHttpGatewayOutput) Spec() MatchableHttpGatewaySpecPtrOutput {
	return o.ApplyT(func(v *MatchableHttpGateway) MatchableHttpGatewaySpecPtrOutput { return v.Spec }).(MatchableHttpGatewaySpecPtrOutput)
}

func (o MatchableHttpGatewayOutput) Status() pulumi.MapOutput {
	return o.ApplyT(func(v *MatchableHttpGateway) pulumi.MapOutput { return v.Status }).(pulumi.MapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MatchableHttpGatewayInput)(nil)).Elem(), &MatchableHttpGateway{})
	pulumi.RegisterOutputType(MatchableHttpGatewayOutput{})
}
